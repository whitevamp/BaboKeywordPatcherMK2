using System;
using System.Linq;
using System.Threading.Tasks;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Synthesis;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Cache;
using System.Collections.Generic;
//
using Mutagen.Bethesda.Plugins.Order;
using Mutagen.Bethesda.Environments;
using CommandLine;
using Noggog;
using System.Xml.Linq;
using System.Runtime.CompilerServices;
using DynamicData.Kernel;
using System.Reflection;
using System.Text.RegularExpressions;
using Mutagen.Bethesda.Plugins.Records;

namespace BaboKeywordPatcherMK2
{
    public class BaboSettings
    {
        //add
        //public bool EroticArmorDefault { get; set; }
        //public bool ArmorHarnessDefault { get; set; }
        //public bool ArmorSpendexDefault { get; set; }
        public bool ArmorTransparentDefault { get; set; }
        public bool BootsHeelsDefault { get; set; }
        //public bool VaginalDildoDefault { get; set; }
        public bool AnalPlugDefault { get; set; }
        public bool PiercingClitDefault { get; set; }
        public bool PiercingNippleDefault { get; set; }
        /*  //public bool ArmorPrettyDefault { get; set; }
         public bool ArmorBondageDefault { get; set; }
         public bool AnalPlugTailDefault { get; set; }
         //public bool AnalBeadsDefault { get; set; }
         public bool VaginalBeadsDefault { get; set; }
         public bool ArmorRubberDefault { get; set; }
         public bool ThongTDefault { get; set; } */
        public bool PantiesNormalDefault { get; set; }
        //public bool HasLeggingsDefault { get; set; }
        public bool HasStockingsDefault { get; set; }
        public bool MiniSkirtDefault { get; set; }
        public bool ArmorHalfNakedBikiniDefault { get; set; }
        /* public bool PastiesNippleDefault { get; set; }
        public bool PastiesCrotchDefault { get; set; }
        public bool ShowgirlSkirtDefault { get; set; }
        public bool PelvicCurtainDefault { get; set; }
        public bool ArmorPartTopDefault { get; set; }
        public bool ArmorLewdLeotardDefault { get; set; } */
        public bool ImpossibleClothesDefault { get; set; }
        /* public bool ArmorCapeMiniDefault { get; set; }
        public bool ArmorCapeFullDefault { get; set; } */
        //public bool EarringsDefault { get; set; }
        /*  public bool PiercingNoseDefault { get; set; }
         public bool PiercingLipsDefault { get; set; }
         public bool PiercingBellyDefault { get; set; }
         public bool PiercingVulvaDefault { get; set; }
         public bool ThongGstringDefault { get; set; }
         public bool MicroHotpantsDefault { get; set; }
         public bool PantsNormalDefault { get; set; } */
        public bool ArmorIllegalDefault { get; set; }
        public bool KillerHeelsDefault { get; set; }
        /* public bool ThongCStringDefault { get; set; }
        public bool ThongLowlegDefault { get; set; } */
        public bool ArmorFemaleOnlyDefault { get; set; }
        public bool BrabikiniDefault { get; set; }
        public bool ArmorHalfNakedDefault { get; set; }
        /* public bool HasSleevesDefault { get; set; } */
        public bool MicroSkirtDefault { get; set; }
        public bool FullSkirtDefault { get; set; }
        public bool ArmorCurtainDefault { get; set; }
        public bool ArmorPartBottomDefault { get; set; }
        //end add
        public bool ArmorPrettyDefault { get; set; }
        public bool ArmorEroticDefault { get; set; }
        public bool EroticDresses { get; set; }
        public bool EarringsDefault { get; set; }
        public HashSet<ModKey> ModsToPatch { get; set; } = new HashSet<ModKey>();
        public HashSet<ModKey> ModsToNotPatch { get; set; } = new HashSet<ModKey>();
    }

    public class Program
    {
        public static Lazy<BaboSettings> _settings = null!;
        public static BaboSettings Settings => _settings.Value;

        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline.Instance
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .SetTypicalOpen(GameRelease.SkyrimSE, "BaboKeywords.esp")
                .SetAutogeneratedSettings(
                            nickname: "Settings",
                            path: "settings.json",
                            out _settings,
                            true)
                .Run(args);
        }

        public static IKeywordGetter LoadKeyword(IPatcherState<ISkyrimMod, ISkyrimModGetter> state, string kwd)
        {
            if (!state.LinkCache.TryResolve<IKeywordGetter>(kwd, out var returnKwd))
            {
                throw new Exception($"Failed to load keyword: {kwd}");
            }
            return returnKwd;
        }

        public static bool StrMatch(string name, string comparator)
        {
            return name.IndexOf(comparator, StringComparison.OrdinalIgnoreCase) >= 0;
        }

        public static bool StrMatchCS(string name, string comparator)
        {
            return name.IndexOf(comparator) >= 0;
        }

        public static bool IsDeviousRenderedItem(string name)
        {
            return StrMatch(name, "scriptinstance") || StrMatch(name, "rendered");
        }

        public static void LoadKeywords(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            // Load all keywords here
            // Example:
            SLA_ArmorHarness = LoadKeyword(state, "SLA_ArmorHarness");

            try
            {
                SLA_ArmorSpendex = LoadKeyword(state, "SLA_ArmorSpendex");
            }
            catch
            {
                SLA_ArmorSpendex = LoadKeyword(state, "SLA_ArmorSpandex");
            }

            SLA_ArmorTransparent = LoadKeyword(state, "SLA_ArmorTransparent");
            SLA_BootsHeels = LoadKeyword(state, "SLA_BootsHeels");
            SLA_VaginalDildo = LoadKeyword(state, "SLA_VaginalDildo");
            SLA_AnalPlug = LoadKeyword(state, "SLA_AnalPlug");
            SLA_PiercingClit = LoadKeyword(state, "SLA_PiercingClit");
            SLA_PiercingNipple = LoadKeyword(state, "SLA_PiercingNipple");
            SLA_ArmorPretty = LoadKeyword(state, "SLA_ArmorPretty");
            EroticArmor = LoadKeyword(state, "EroticArmor");
            SLA_ArmorBondage = LoadKeyword(state, "SLA_ArmorBondage");
            SLA_AnalPlugTail = LoadKeyword(state, "SLA_AnalPlugTail");
            //SLA_AnalBeads = LoadKeyword(state, "SLA_AnalPlugBeads");
            SLA_VaginalBeads = LoadKeyword(state, "SLA_VaginalBeads");
            SLA_ArmorRubber = LoadKeyword(state, "SLA_ArmorRubber");
            // Not in SexLabAroused Redux V28b SSE Modified by BakaFactory(2020 11 17)
            //SLA_BraArmor = LoadKeyword(state, "SLA_BraArmor");
            SLA_ThongT = LoadKeyword(state, "SLA_ThongT");
            SLA_PantiesNormal = LoadKeyword(state, "SLA_PantiesNormal");
            SLA_HasLeggings = LoadKeyword(state, "SLA_HasLeggings");
            SLA_HasStockings = LoadKeyword(state, "SLA_HasStockings");
            SLA_MiniSkirt = LoadKeyword(state, "SLA_MiniSkirt");
            SLA_ArmorHalfNakedBikini = LoadKeyword(state, "SLA_ArmorHalfNakedBikini");
            //Added Keywords. From SexLabAroused Redux V28b SSE Modified by BakaFactory(2020 11 17)
            SLA_FullSkirt = LoadKeyword(state, "SLA_FullSkirt");
            SLA_ArmorCurtain = LoadKeyword(state, "SLA_ArmorCurtain");
            SLA_ArmorPartBottom = LoadKeyword(state, "SLA_ArmorPartBottom");
            SLA_HasSleeves = LoadKeyword(state, "SLA_HasSleeves");
            SLA_MicroSkirt = LoadKeyword(state, "SLA_MicroSkirt");
            SLA_Brabikini = LoadKeyword(state, "SLA_Brabikini");
            SLA_ArmorHalfNaked = LoadKeyword(state, "SLA_ArmorHalfNaked");
            SLA_ArmorFemaleOnly = LoadKeyword(state, "SLA_ArmorFemaleOnly");
            SLA_PiercingBelly = LoadKeyword(state, "SLA_PiercingBelly");
            SLA_PiercingVulva = LoadKeyword(state, "SLA_PiercingVulva");
            SLA_ThongGstring = LoadKeyword(state, "SLA_ThongGstring");
            SLA_MicroHotpants = LoadKeyword(state, "SLA_MicroHotpants");
            SLA_PantsNormal = LoadKeyword(state, "SLA_PantsNormal");
            SLA_ArmorIllegal = LoadKeyword(state, "SLA_ArmorIllegal");
            SLA_KillerHeels = LoadKeyword(state, "SLA_KillerHeels");
            SLA_ThongCString = LoadKeyword(state, "SLA_ThongCString");
            SLA_ThongLowleg = LoadKeyword(state, "SLA_ThongLowleg");
            SLA_Earrings = LoadKeyword(state, "SLA_Earrings");
            SLA_PiercingNose = LoadKeyword(state, "SLA_PiercingNose");
            SLA_PiercingLips = LoadKeyword(state, "SLA_PiercingLips");
            SLA_ShowgirlSkirt = LoadKeyword(state, "SLA_ShowgirlSkirt");
            SLA_PelvicCurtain = LoadKeyword(state, "SLA_PelvicCurtain");
            SLA_ArmorPartTop = LoadKeyword(state, "SLA_ArmorPartTop");
            SLA_ArmorLewdLeotard = LoadKeyword(state, "SLA_ArmorLewdLeotard");
            SLA_ImpossibleClothes = LoadKeyword(state, "SLA_ImpossibleClothes");
            SLA_ArmorCapeMini = LoadKeyword(state, "SLA_ArmorCapeMini");
            SLA_ArmorCapeFull = LoadKeyword(state, "SLA_ArmorCapeFull");
            SLA_PastiesNipple = LoadKeyword(state, "SLA_PastiesNipple");
            SLA_PastiesCrotch = LoadKeyword(state, "SLA_PastiesCrotch");
        }

        private static void AddTag(Armor armorEditObj, IKeywordGetter tag)
        {
            if (armorEditObj.Keywords == null)
            {
                armorEditObj.Keywords = new ExtendedList<IFormLinkGetter<IKeywordGetter>>();
            }

            if (!armorEditObj.Keywords.Contains(tag))
            {
                armorEditObj.Keywords.Add(tag);
            }
        }

        public static void ParseName(IPatcherState<ISkyrimMod, ISkyrimModGetter> state, IArmorGetter armor, string name)
        {
            bool matched = false;
            var armorEditObj = state.PatchMod.Armors.GetOrAddAsOverride(armor);

            if (armorEditObj == null)
            {
                Console.WriteLine($"Armor is null for {name}");
                return;
            }

            /* if (StrMatch(name, "harness") || StrMatch(name, "corset") || StrMatch(name, "StraitJacket") ||
                StrMatch(name, "hobble") || StrMatch(name, "tentacles") ||
                StrMatch(name, "slave") || StrMatch(name, "chastity") || StrMatch(name, "cuff") || StrMatch(name, "binder") ||
                StrMatch(name, "yoke") || StrMatch(name, "mitten"))
            {
                matched = true;
                AddTag(armorEditObj, SLA_ArmorTransparent);
            }

            // Additional parsing rules here...
			var tagConfigs = new List<(string ConfigName, string[] DataNames, string Tag)>
			{
				("ArmorPrettyDefault", new[] { "armor", "cuiras", "robes" }, "SLA_ArmorPretty"),
				("ArmorEroticDefault", new[] { "armor", "cuiras", "robes" }, "EroticArmor"),
				("EarringsDefault", new[] { "earring" }, "SLA_Earrings"),
				// Add your remaining 57 entries here...
			};
			
			if (!matched)
			{
				foreach (var config in tagConfigs)
				{
					if ((bool)Settings.GetType().GetProperty(config.ConfigName).GetValue(Settings) && !matched && config.DataNames.Any(dataName => StrMatch(name, dataName)))
					{
						matched = true;
						AddTag(armorEditObj, config.Tag);
					}
				}

				if (matched)
				{
					state.PatchMod.Armors.Set(armorEditObj);
				} */
            var tagConfigs = new List<(string ConfigName, string[] DataNames, string Tag)>
                {
                ("ArmorEroticDefault", new[] { "armor", "cuiras", "robes" }, "EroticArmor"),
				/* ("ArmorHarnessDefault", new[] { "earring" }, "SLA_ArmorHarness"),
				("ArmorSpendexDefault", new[] { "earring" }, "SLA_ArmorSpendex"), */
				("ArmorTransparentDefault", new[] { "harness", "corset", "StraitJacket", "hobble", "tentacles", "slave", "chastity", "cuff", "binder", "yoke", "mitten", "glove" }, "SLA_ArmorTransparent"),
                ("BootsHeelsDefault", new[] { "boots" }, "SLA_BootsHeels"),
				/* ("VaginalDildoDefault", new[] { "earring" }, "SLA_VaginalDildo"),
				("AnalPlugDefault", new[] { "earring" }, "SLA_AnalPlug"),
				("PiercingClitDefault", new[] { "earring" }, "SLA_PiercingClit"),
				("PiercingNippleDefault", new[] { "earring" }, "SLA_PiercingNipple"),
				("ArmorPrettyDefault", new[] { "armor", "cuiras", "robes" }, "SLA_ArmorPretty"),
				("ArmorBondageDefault", new[] { "earring" }, "SLA_ArmorBondage"),
				("AnalPlugTailDefault", new[] { "earring" }, "SLA_AnalPlugTail"),
				//("AnalBeadsDefault", new[] { "earring" }, "SLA_AnalBeads"),
				("VaginalBeadsDefault", new[] { "earring" }, "SLA_VaginalBeads"),
				("ArmorRubberDefault", new[] { "earring" }, "SLA_ArmorRubber"),
				("ThongTDefault", new[] { "earring" }, "SLA_ThongT"), */
				("PantiesNormalDefault", new[] { "panties" }, "SLA_PantiesNormal"),
				/* ("HasLeggingsDefault", new[] { "earring" }, "SLA_HasLeggings"), */
				("HasStockingsDefault", new[] { "stocking", "stockings", "stock", "lingerie stocking", "lingeriestocking", "lingerie_stock" }, "SLA_HasStockings"),
                ("MiniSkirtDefault", new[] { "skirt" }, "SLA_MiniSkirt"),
                ("ArmorHalfNakedBikiniDefault", new[] { "earring" }, "SLA_ArmorHalfNakedBikini"),
				/* ("PastiesNippleDefault", new[] { "earring" }, "SLA_PastiesNipple"),
				("PastiesCrotchDefault", new[] { "earring" }, "SLA_PastiesCrotch"),
				("ShowgirlSkirtDefault", new[] { "earring" }, "SLA_ShowgirlSkirt"),
				("PelvicCurtainDefault", new[] { "earring" }, "SLA_PelvicCurtain"),
				("ArmorPartTopDefault", new[] { "earring" }, "SLA_ArmorPartTop"),
				("ArmorLewdLeotardDefault", new[] { "earring" }, "SLA_ArmorLewdLeotard"), */
				("ImpossibleClothesDefault", new[] { "lace", "lacebody", "lingerie" }, "SLA_ImpossibleClothes"),
				/* ("ArmorCapeMiniDefault", new[] { "earring" }, "SLA_ArmorCapeMini"),
				("ArmorCapeFullDefault", new[] { "earring" }, "SLA_ArmorCapeFull"), */
				("EarringsDefault", new[] { "earring" }, "SLA_Earrings"),
				/* ("PiercingNoseDefault", new[] { "earring" }, "SLA_PiercingNose"),
				("PiercingLipsDefault", new[] { "earring" }, "SLA_PiercingLips"),
				("PiercingBellyDefault", new[] { "earring" }, "SLA_PiercingBelly"),
				("PiercingVulvaDefault", new[] { "earring" }, "SLA_PiercingVulva"),
				("ThongGstringDefault", new[] { "earring" }, "SLA_ThongGstring"),
				("MicroHotpantsDefault", new[] { "earring" }, "SLA_MicroHotpants"),
				("PantsNormalDefault", new[] { "earring" }, "SLA_PantsNormal"), */
				("ArmorIllegalDefault", new[] { "lace", "lacebody", "lingerie" }, "SLA_ArmorIllegal"),
                ("KillerHeelsDefault", new[] { "shoes", "boots" }, "SLA_KillerHeels"),
				/* ("ThongCStringDefault", new[] { "earring" }, "SLA_ThongCString"),
				("ThongLowlegDefault", new[] { "earring" }, "SLA_ThongLowleg"), */
				("ArmorFemaleOnlyDefault", new[] { "lace", "lacebody" }, "SLA_ArmorFemaleOnly"),
                ("BrabikiniDefault", new[] { "bra" }, "SLA_Brabikini"),
                ("ArmorHalfNakedDefault", new[] { "lace", "lacebody", "lingerie" }, "SLA_ArmorHalfNaked"),
				/* ("HasSleevesDefault", new[] { "earring" }, "SLA_HasSleeves"), */
				("MicroSkirtDefault", new[] { "skirt" }, "SLA_MicroSkirt"),
                ("FullSkirtDefault", new[] { "skirt" }, "SLA_FullSkirt"),
                ("ArmorCurtainDefault", new[] { "earring" }, "SLA_ArmorCurtain"),
                ("ArmorPartBottomDefault", new[] { "earring" }, "SLA_ArmorPartBottom"),
                };
            if (!matched)
            {
                foreach (var config in tagConfigs)
                {
                    var configValue = Settings.GetType().GetProperty(config.ConfigName)?.GetValue(Settings) as bool?;
                    if (configValue == true)

                    //GetProperty(config.ConfigName).GetValue(Settings).

                    //if ((bool)Settings.GetType().GetProperty(config.ConfigName).GetValue(Settings) && !matched && config.DataNames.Any(dataName => StrMatch(name, dataName)))
                    {
                        matched = true;
                        var keywordGetter = LoadKeyword(state, config.Tag);
                        AddTag(armorEditObj, keywordGetter);
                        //AddTag(armorEditObj, config.Tag);
                    }
                }

                if (matched)
                {
                    state.PatchMod.Armors.Set(armorEditObj);
                }
            }

            //} //!matched
        } // ParseName

        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            HashSet<string> MASTER_MODS = new HashSet<string>()
            {
                "SexLabAroused.esm",
            };

            var modsToPatch = Settings.ModsToPatch;
            var modsToNotPatch = Settings.ModsToNotPatch;

            if (modsToNotPatch.Any())
            {
                Console.WriteLine($"Blacklist:\n{string.Join("\n", modsToNotPatch)}");
            }

            var shortenedLoadOrder = modsToPatch.Any()
                ? state.LoadOrder.PriorityOrder.Where(mod => modsToPatch.Contains(mod.ModKey) && !modsToNotPatch.Contains(mod.ModKey)).ToList()
                : state.LoadOrder.PriorityOrder.Where(mod => !modsToNotPatch.Contains(mod.ModKey)).ToList();

            /*LoadKeywords(state);
            
            foreach (var armor in shortenedLoadOrder.SelectMany(mod => mod.Mod?.Armors?.Where(a => a.Name != null)))
            {
				//if (name == null) throw new ArgumentNullException(nameof(name));
                ParseName(state, armor, armor.Name!.ToString());
            }*/
            LoadKeywords(state);

            foreach (var armor in shortenedLoadOrder
                .Where(mod => mod.Mod != null)  // Ensure mod.Mod is not null
                .SelectMany(mod => mod.Mod!.Armors ?? Enumerable.Empty<IArmorGetter>())  // Safely handle null Armors collections
                .Where(a => a.Name != null))  // Ensure armor.Name is not null
            {
                var name = armor.Name?.ToString(); // Use the null-conditional operator

                if (name != null)
                {
                    ParseName(state, armor, name);
                }
                else
                {
                    Console.WriteLine($"Armor '{armor.EditorID}' has been skipped due to a null name.");
                    // Alternatively, you can use armor.FormKey.ToString() if EditorID is null or unavailable
                }
            }
        }

        // Keyword variables (placeholders)
        public static IKeywordGetter? EroticArmor;
        public static IKeywordGetter? SLA_ArmorHarness;
        public static IKeywordGetter? SLA_ArmorSpendex;
        public static IKeywordGetter? SLA_ArmorTransparent;
        public static IKeywordGetter? SLA_BootsHeels;
        public static IKeywordGetter? SLA_VaginalDildo;
        public static IKeywordGetter? SLA_AnalPlug;
        public static IKeywordGetter? SLA_PiercingClit;
        public static IKeywordGetter? SLA_PiercingNipple;
        public static IKeywordGetter? SLA_ArmorPretty;
        public static IKeywordGetter? SLA_ArmorBondage;
        public static IKeywordGetter? SLA_AnalPlugTail;
        //public static IKeywordGetter? SLA_AnalBeads;
        public static IKeywordGetter? SLA_VaginalBeads;
        public static IKeywordGetter? SLA_ArmorRubber;
        // Not in SexLabAroused Redux V28b SSE Modified by BakaFactory(2020 11 17)
        //public static IKeywordGetter? SLA_BraArmor;
        public static IKeywordGetter? SLA_ThongT;
        public static IKeywordGetter? SLA_PantiesNormal;
        public static IKeywordGetter? SLA_HasLeggings;
        public static IKeywordGetter? SLA_HasStockings;
        public static IKeywordGetter? SLA_MiniSkirt;
        public static IKeywordGetter? SLA_ArmorHalfNakedBikini;
        //Added Keywords. From SexLabAroused Redux V28b SSE Modified by BakaFactory(2020 11 17)
        public static IKeywordGetter? SLA_PastiesNipple;
        public static IKeywordGetter? SLA_PastiesCrotch;
        public static IKeywordGetter? SLA_ShowgirlSkirt;
        public static IKeywordGetter? SLA_PelvicCurtain;
        public static IKeywordGetter? SLA_ArmorPartTop;
        public static IKeywordGetter? SLA_ArmorLewdLeotard;
        public static IKeywordGetter? SLA_ImpossibleClothes;
        public static IKeywordGetter? SLA_ArmorCapeMini;
        public static IKeywordGetter? SLA_ArmorCapeFull;
        public static IKeywordGetter? SLA_Earrings;
        public static IKeywordGetter? SLA_PiercingNose;
        public static IKeywordGetter? SLA_PiercingLips;
        public static IKeywordGetter? SLA_PiercingBelly;
        public static IKeywordGetter? SLA_PiercingVulva;
        public static IKeywordGetter? SLA_ThongGstring;
        public static IKeywordGetter? SLA_MicroHotpants;
        public static IKeywordGetter? SLA_PantsNormal;
        public static IKeywordGetter? SLA_ArmorIllegal;
        public static IKeywordGetter? SLA_KillerHeels;
        public static IKeywordGetter? SLA_ThongCString;
        public static IKeywordGetter? SLA_ThongLowleg;
        public static IKeywordGetter? SLA_ArmorFemaleOnly;
        public static IKeywordGetter? SLA_Brabikini;
        public static IKeywordGetter? SLA_ArmorHalfNaked;
        public static IKeywordGetter? SLA_HasSleeves;
        public static IKeywordGetter? SLA_MicroSkirt;
        public static IKeywordGetter? SLA_FullSkirt;
        public static IKeywordGetter? SLA_ArmorCurtain;
        public static IKeywordGetter? SLA_ArmorPartBottom;
    }
}