#nullable enable  // Enables nullable reference types for this fileusing System;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Synthesis;
//
using Noggog;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace BaboKeywordPatcher
{
    public class BaboSettings
    {
        //add
        //public bool EroticArmorDefault { get; set; }
        //public bool ArmorHarnessDefault { get; set; }
        //public bool ArmorSpendexDefault { get; set; }
        public bool ArmorTransparentDefault { get; set; }
        public bool BootsHeelsDefault { get; set; }
        //public bool VaginalDildoDefault { get; set; }
        public bool AnalPlugDefault { get; set; }
        public bool PiercingClitDefault { get; set; }
        public bool PiercingNippleDefault { get; set; }
        /*  //public bool ArmorPrettyDefault { get; set; }
         public bool ArmorBondageDefault { get; set; }
         public bool AnalPlugTailDefault { get; set; }
         //public bool AnalBeadsDefault { get; set; }
         public bool VaginalBeadsDefault { get; set; }
         public bool ArmorRubberDefault { get; set; }
         public bool ThongTDefault { get; set; } */
        public bool PantiesNormalDefault { get; set; }
        //public bool HasLeggingsDefault { get; set; }
        public bool HasStockingsDefault { get; set; }
        public bool MiniSkirtDefault { get; set; }
        public bool ArmorHalfNakedBikiniDefault { get; set; }
        /* public bool PastiesNippleDefault { get; set; }
        public bool PastiesCrotchDefault { get; set; }
        public bool ShowgirlSkirtDefault { get; set; }
        public bool PelvicCurtainDefault { get; set; }*/
        public bool ArmorPartTopDefault { get; set; }
        public bool ArmorLewdLeotardDefault { get; set; }
        public bool ImpossibleClothesDefault { get; set; }
        /* public bool ArmorCapeMiniDefault { get; set; }*/
        public bool ArmorCapeFullDefault { get; set; }
        //public bool EarringsDefault { get; set; }
        /*  public bool PiercingNoseDefault { get; set; }
         public bool PiercingLipsDefault { get; set; }
         public bool PiercingBellyDefault { get; set; }
         public bool PiercingVulvaDefault { get; set; }
         public bool ThongGstringDefault { get; set; }
         public bool MicroHotpantsDefault { get; set; }*/
        public bool PantsNormalDefault { get; set; }
        public bool ArmorIllegalDefault { get; set; }
        public bool KillerHeelsDefault { get; set; }
        /* public bool ThongCStringDefault { get; set; }
        public bool ThongLowlegDefault { get; set; } */
        public bool ArmorFemaleOnlyDefault { get; set; }
        public bool BrabikiniDefault { get; set; }
        public bool ArmorHalfNakedDefault { get; set; }
        public bool HasSleevesDefault { get; set; }
        public bool MicroSkirtDefault { get; set; }
        public bool FullSkirtDefault { get; set; }
        public bool ArmorCurtainDefault { get; set; }
        public bool ArmorPartBottomDefault { get; set; }
        //end add
        public bool ArmorPrettyDefault { get; set; }
        public bool ArmorEroticDefault { get; set; }
        public bool EroticDresses { get; set; }
        public bool EarringsDefault { get; set; }
        public HashSet<ModKey> ModsToPatch { get; set; } = new HashSet<ModKey>();
        public HashSet<ModKey> ModsToNotPatch { get; set; } = new HashSet<ModKey>();
    }

    public class Program
    {
        public static Lazy<BaboSettings> _settings = null!;
        public static BaboSettings Settings => _settings.Value;

        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline.Instance
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .SetTypicalOpen(GameRelease.SkyrimSE, "BaboKeywords.esp")
                .SetAutogeneratedSettings(
                            nickname: "Settings",
                            path: "settings.json",
                            out _settings,
                            true)
                .Run(args);
        }

        public static IKeywordGetter? LoadKeyword(IPatcherState<ISkyrimMod, ISkyrimModGetter> state, string kwd)
        {
            if (state.LinkCache.TryResolve<IKeywordGetter>(kwd, out var returnKwd))
            {
                return returnKwd;
            }

            Console.WriteLine($"Warning: Failed to load keyword: {kwd}");
            return null;
        }

        public static bool StrMatch(string name, string comparator)
        {
            return name.IndexOf(comparator, StringComparison.OrdinalIgnoreCase) >= 0;
        }

        public static bool StrMatchCS(string name, string comparator)
        {
            return name.IndexOf(comparator) >= 0;
        }

        public static bool IsDeviousRenderedItem(string name)
        {
            return StrMatch(name, "scriptinstance") || StrMatch(name, "rendered");
        }

        public static void LoadKeywords(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            // Load all keywords here
            // Example:
            SLA_ArmorHarness = LoadKeyword(state, "SLA_ArmorHarness");

            try
            {
                SLA_ArmorSpendex = LoadKeyword(state, "SLA_ArmorSpendex");
            }
            catch
            {
                SLA_ArmorSpendex = LoadKeyword(state, "SLA_ArmorSpandex");
            }

            SLA_ArmorTransparent = LoadKeyword(state, "SLA_ArmorTransparent");
            SLA_BootsHeels = LoadKeyword(state, "SLA_BootsHeels");
            SLA_VaginalDildo = LoadKeyword(state, "SLA_VaginalDildo");
            SLA_AnalPlug = LoadKeyword(state, "SLA_AnalPlug");
            SLA_PiercingClit = LoadKeyword(state, "SLA_PiercingClit");
            SLA_PiercingNipple = LoadKeyword(state, "SLA_PiercingNipple");
            SLA_ArmorPretty = LoadKeyword(state, "SLA_ArmorPretty");
            EroticArmor = LoadKeyword(state, "EroticArmor");
            SLA_ArmorBondage = LoadKeyword(state, "SLA_ArmorBondage");
            SLA_AnalPlugTail = LoadKeyword(state, "SLA_AnalPlugTail");
            SLA_AnalBeads = LoadKeyword(state, "SLA_AnalPlugBeads");
            SLA_VaginalBeads = LoadKeyword(state, "SLA_VaginalBeads");
            SLA_ArmorRubber = LoadKeyword(state, "SLA_ArmorRubber");
            // Not in SexLabAroused Redux V28b SSE Modified by BakaFactory(2020 11 17)
            //SLA_BraArmor = LoadKeyword(state, "SLA_BraArmor");
            SLA_ThongT = LoadKeyword(state, "SLA_ThongT");
            SLA_PantiesNormal = LoadKeyword(state, "SLA_PantiesNormal");
            SLA_HasLeggings = LoadKeyword(state, "SLA_HasLeggings");
            SLA_HasStockings = LoadKeyword(state, "SLA_HasStockings");
            SLA_MiniSkirt = LoadKeyword(state, "SLA_MiniSkirt");
            SLA_ArmorHalfNakedBikini = LoadKeyword(state, "SLA_ArmorHalfNakedBikini");
            //Added Keywords. From SexLabAroused Redux V28b SSE Modified by BakaFactory(2020 11 17)
            SLA_FullSkirt = LoadKeyword(state, "SLA_FullSkirt");
            SLA_ArmorCurtain = LoadKeyword(state, "SLA_ArmorCurtain");
            SLA_ArmorPartBottom = LoadKeyword(state, "SLA_ArmorPartBottom");
            SLA_HasSleeves = LoadKeyword(state, "SLA_HasSleeves");
            SLA_MicroSkirt = LoadKeyword(state, "SLA_MicroSkirt");
            SLA_Brabikini = LoadKeyword(state, "SLA_Brabikini");
            SLA_ArmorHalfNaked = LoadKeyword(state, "SLA_ArmorHalfNaked");
            SLA_ArmorFemaleOnly = LoadKeyword(state, "SLA_ArmorFemaleOnly");
            SLA_PiercingBelly = LoadKeyword(state, "SLA_PiercingBelly");
            SLA_PiercingVulva = LoadKeyword(state, "SLA_PiercingVulva");
            SLA_ThongGstring = LoadKeyword(state, "SLA_ThongGstring");
            SLA_MicroHotpants = LoadKeyword(state, "SLA_MicroHotpants");
            SLA_PantsNormal = LoadKeyword(state, "SLA_PantsNormal");
            SLA_ArmorIllegal = LoadKeyword(state, "SLA_ArmorIllegal");
            SLA_KillerHeels = LoadKeyword(state, "SLA_KillerHeels");
            SLA_ThongCString = LoadKeyword(state, "SLA_ThongCString");
            SLA_ThongLowleg = LoadKeyword(state, "SLA_ThongLowleg");
            SLA_Earrings = LoadKeyword(state, "SLA_Earrings");
            SLA_PiercingNose = LoadKeyword(state, "SLA_PiercingNose");
            SLA_PiercingLips = LoadKeyword(state, "SLA_PiercingLips");
            SLA_ShowgirlSkirt = LoadKeyword(state, "SLA_ShowgirlSkirt");
            SLA_PelvicCurtain = LoadKeyword(state, "SLA_PelvicCurtain");
            SLA_ArmorPartTop = LoadKeyword(state, "SLA_ArmorPartTop");
            SLA_ArmorLewdLeotard = LoadKeyword(state, "SLA_ArmorLewdLeotard");
            SLA_ImpossibleClothes = LoadKeyword(state, "SLA_ImpossibleClothes");
            SLA_ArmorCapeMini = LoadKeyword(state, "SLA_ArmorCapeMini");
            SLA_ArmorCapeFull = LoadKeyword(state, "SLA_ArmorCapeFull");
            SLA_PastiesNipple = LoadKeyword(state, "SLA_PastiesNipple");
            SLA_PastiesCrotch = LoadKeyword(state, "SLA_PastiesCrotch");
        }

        private static void AddTag(Armor armorEditObj, IKeywordGetter? tag)
        {
            if (tag == null) return; // Ensure 'tag' is not null

            if (armorEditObj.Keywords == null)
            {
                armorEditObj.Keywords = new ExtendedList<IFormLinkGetter<IKeywordGetter>>();
            }

            if (!armorEditObj.Keywords.Contains(tag))
            {
                armorEditObj.Keywords.Add(tag);
            }
        }

        public static void ParseName(IPatcherState<ISkyrimMod, ISkyrimModGetter> state, IArmorGetter armor, string name)
        {
            if (name == null)
            {
                Console.WriteLine($"Armor name is null for armor {armor.EditorID}");
                return;
            }

            bool matched = false;
            var armorEditObj = state.PatchMod.Armors.GetOrAddAsOverride(armor);

            if (armorEditObj == null)
            {
                Console.WriteLine($"Armor is null for {name}");
                return;
            }

            if (StrMatch(name, "harness") || StrMatch(name, "corset") || StrMatch(name, "StraitJacket") ||
                StrMatch(name, "hobble") || StrMatch(name, "tentacles") ||
                StrMatch(name, "slave") || StrMatch(name, "chastity") || StrMatch(name, "cuff") || StrMatch(name, "binder") ||
                StrMatch(name, "yoke") || StrMatch(name, "mitten") || StrMatch(name, "gauntlets "))
            {
                matched = true;
                AddTag(armorEditObj, SLA_ArmorTransparent);
            }

            /*// Additional parsing rules here...
 
            if (Settings.ArmorPrettyDefault && !matched && (StrMatch(name, "armor") || StrMatch(name, "cuiras") || StrMatch(name, "robes")))
            {
                matched = true;
                AddTag(armorEditObj, SLA_ArmorPretty);
            }
            else if (Settings.ArmorEroticDefault && !matched && (StrMatch(name, "armor") || StrMatch(name, "cuiras") || StrMatch(name, "robes")))
            {
                matched = true;
                AddTag(armorEditObj, EroticArmor);
            }
            else if (settings.EarringsDefault && !matched && (StrMatch(name, "earring"))) //|| StrMatch(name, "cuiras") || StrMatch(name, "robes")))
            {
                matched = true;
                AddTag(armorEditObj, SLA_Earrings);
            }
            
            if (matched)
            {
                state.PatchMod.Armors.Set(armorEditObj);
            }
        } */
            if (!matched)
            {
                if (Settings.ArmorPrettyDefault && (StrMatch(name, "armor") || StrMatch(name, "cuiras") || StrMatch(name, "robes")))
                {
                    matched = true;
                    AddTag(armorEditObj, SLA_ArmorPretty);
                }
                else if (Settings.ArmorEroticDefault && (StrMatch(name, "armor") || StrMatch(name, "cuiras") || StrMatch(name, "robes")))
                {
                    matched = true;
                    AddTag(armorEditObj, EroticArmor);
                }
                else if (Settings.EarringsDefault && StrMatch(name, "earring"))
                {
                    matched = true;
                    AddTag(armorEditObj, SLA_Earrings);
                }
                /*
				Remove comment block to add that keyword, but it needs to be maped to an armor pice/'s
				example: replace earring with the name of an armor pice that would align with the BaboKeyWord SLA_ArmorHarness
				("ArmorHarnessDefault
				else if (Settings.ArmorHarnessDefault && (StrMatch(name, "earring")))
				{
				matched = true;
				AddTag(armorEditObj, SLA_ArmorHarness);
				}
				End Example.
				*/
                // Added extra Keywords
                /* ("ArmorHarnessDefault
				else if (Settings.ArmorHarnessDefault && (StrMatch(name, "earring")))
				{
				matched = true;
				AddTag(armorEditObj, SLA_ArmorHarness);
				}//"SLA_ArmorHarness")
				//("ArmorSpendexDefault
				else if (Settings.ArmorSpendexDefault && (StrMatch(name, "earring")))
				{
				matched = true;
				AddTag(armorEditObj, SLA_ArmorSpendex);
				}//"SLA_ArmorSpendex"),
				*/
                //("ArmorTransparentDefault
                else if (Settings.ArmorTransparentDefault && (StrMatch(name, "harness") || StrMatch(name, "corset") || StrMatch(name, "StraitJacket") || StrMatch(name, "hobble") || StrMatch(name, "tentacles") || StrMatch(name, "slave") || StrMatch(name, "chastity") || StrMatch(name, "cuff") || StrMatch(name, "binder") || StrMatch(name, "yoke") || StrMatch(name, "mitten") || StrMatch(name, "glove") || StrMatch(name, "gauntlets ")))
                {
                    matched = true;
                    AddTag(armorEditObj, SLA_ArmorTransparent);
                }//"SLA_ArmorTransparent")
                 //("BootsHeelsDefault
                else if (Settings.BootsHeelsDefault && (StrMatch(name, "boots")))
                {
                    matched = true;
                    AddTag(armorEditObj, SLA_BootsHeels);
                }//"SLA_BootsHeels"),
                /* ("VaginalDildoDefault
				else if (Settings.VaginalDildoDefault && (StrMatch(name, "earring")))
				{
				matched = true;
				AddTag(armorEditObj, SLA_VaginalDildo);
				}//"SLA_VaginalDildo")
				//("AnalPlugDefault
				else if (Settings.AnalPlugDefault && (StrMatch(name, "earring")))
				{
				matched = true;
				AddTag(armorEditObj, SLA_AnalPlug);
				}//"SLA_AnalPlug")
				//("PiercingClitDefault
				else if (Settings.PiercingClitDefault && (StrMatch(name, "earring")))
				{
				matched = true;
				AddTag(armorEditObj, SLA_PiercingClit);
				}//"SLA_PiercingClit")
				//("PiercingNippleDefault
				else if (Settings.PiercingNippleDefault && (StrMatch(name, "earring")))
				{
				matched = true;
				AddTag(armorEditObj, SLA_PiercingNipple);
				}//"SLA_PiercingNipple")
				//("ArmorPrettyDefault
				else if (Settings.ArmorPrettyDefault && (StrMatch(name, "armor") || StrMatch(name, "cuiras") || StrMatch(name, "robes")))
				{
				matched = true;
				AddTag(armorEditObj, SLA_ArmorPretty);
				}//"SLA_ArmorPretty")
				//("ArmorBondageDefault
				else if (Settings.ArmorBondageDefault && (StrMatch(name, "earring")))
				{
				matched = true;
				AddTag(armorEditObj, SLA_ArmorBondage);
				}//"SLA_ArmorBondage")
				//("AnalPlugTailDefault
				else if (Settings.AnalPlugTailDefault && (StrMatch(name, "earring")))
				{
				matched = true;
				AddTag(armorEditObj, SLA_AnalPlugTail);
				}//"SLA_AnalPlugTail"),//("AnalBeadsDefault
				else if (Settings.AnalBeadsDefault && (StrMatch(name, "earring")))
				{
				matched = true;
				AddTag(armorEditObj, SLA_AnalBeads);
				}//"SLA_AnalBeads")
				//("VaginalBeadsDefault
				else if (Settings.VaginalBeadsDefault && (StrMatch(name, "earring")))
				{
				matched = true;
				AddTag(armorEditObj, SLA_VaginalBeads);
				}//"SLA_VaginalBeads")
				//("ArmorRubberDefault
				else if (Settings.ArmorRubberDefault && (StrMatch(name, "earring")))
				{
				matched = true;
				AddTag(armorEditObj, SLA_ArmorRubber);
				}//"SLA_ArmorRubber")
				//("ThongTDefault
				else if (Settings.ThongTDefault && (StrMatch(name, "earring")))
				{
				matched = true;
				AddTag(armorEditObj, SLA_ThongT);
				}//"SLA_ThongT"),
				*/
                //("PantiesNormalDefault
                else if (Settings.PantiesNormalDefault && (StrMatch(name, "panties") || StrMatch(name, "panti") || StrMatch(name, "panty") || StrMatch(name, "briefs") || StrMatch(name, "underwear")))
                {
                    matched = true;
                    AddTag(armorEditObj, SLA_PantiesNormal);
                }//"SLA_PantiesNormal"),
                /* ("HasLeggingsDefault
				else if (Settings.HasLeggingsDefault && (StrMatch(name, "earring")))
				{
				matched = true;
				AddTag(armorEditObj, SLA_HasLeggings);
				}//"SLA_HasLeggings"),
				*/
                //("HasStockingsDefault
                else if (Settings.HasStockingsDefault && (StrMatch(name, "stocking") || StrMatch(name, "stockings") || StrMatch(name, "stock") || StrMatch(name, "lingerie stocking") || StrMatch(name, "lingeriestocking") || StrMatch(name, "lingerie_stock")))
                {
                    matched = true;
                    AddTag(armorEditObj, SLA_HasStockings);
                }//"SLA_HasStockings")
                 //("MiniSkirtDefault
                else if (Settings.MiniSkirtDefault && (StrMatch(name, "skirt")))
                {
                    matched = true;
                    AddTag(armorEditObj, SLA_MiniSkirt);
                }//"SLA_MiniSkirt")
                /*//("ArmorHalfNakedBikiniDefault
               else if (Settings.ArmorHalfNakedBikiniDefault && (StrMatch(name, "earring")))
               {
                   matched = true;
                   AddTag(armorEditObj, SLA_ArmorHalfNakedBikini);
               }//"SLA_ArmorHalfNakedBikini"),
                //("PastiesNippleDefault
               else if (Settings.PastiesNippleDefault && (StrMatch(name, "earring")))
               {
               matched = true;
               AddTag(armorEditObj, SLA_PastiesNipple);
               }//"SLA_PastiesNipple")
               //("PastiesCrotchDefault
               else if (Settings.PastiesCrotchDefault && (StrMatch(name, "earring")))
               {
               matched = true;
               AddTag(armorEditObj, SLA_PastiesCrotch);
               }//"SLA_PastiesCrotch")
               //("ShowgirlSkirtDefault
               else if (Settings.ShowgirlSkirtDefault && (StrMatch(name, "earring")))
               {
               matched = true;
               AddTag(armorEditObj, SLA_ShowgirlSkirt);
               }//"SLA_ShowgirlSkirt")
               //("PelvicCurtainDefault
               else if (Settings.PelvicCurtainDefault && (StrMatch(name, "earring")))
               {
               matched = true;
               AddTag(armorEditObj, SLA_PelvicCurtain);
               }//"SLA_PelvicCurtain")
               //("ArmorPartTopDefault*/
                else if (Settings.ArmorPartTopDefault && (StrMatch(name, "top") || StrMatch(name, "shirt")))
                {
                    matched = true;
                    AddTag(armorEditObj, SLA_ArmorPartTop);
                }//"SLA_ArmorPartTop")
                 //("ArmorLewdLeotardDefault
                else if (Settings.ArmorLewdLeotardDefault && (StrMatch(name, "bodysuit")))
                {
                    matched = true;
                    AddTag(armorEditObj, SLA_ArmorLewdLeotard);
                }//"SLA_ArmorLewdLeotard"),

                //("ImpossibleClothesDefault
                else if (Settings.ImpossibleClothesDefault && (StrMatch(name, "lace") || StrMatch(name, "lacebody") || StrMatch(name, "lingerie")))
                {
                    matched = true;
                    AddTag(armorEditObj, SLA_ImpossibleClothes);
                }//"SLA_ImpossibleClothes"),
                /* ("ArmorCapeMiniDefault
				else if (Settings.ArmorCapeMiniDefault && (StrMatch(name, "earring")))
				{
				matched = true;
				AddTag(armorEditObj, SLA_ArmorCapeMini);
				}//"SLA_ArmorCapeMini")*/
                //("ArmorCapeFullDefault
                else if (Settings.ArmorCapeFullDefault && (StrMatch(name, "cape")))
                {
                    matched = true;
                    AddTag(armorEditObj, SLA_ArmorCapeFull);
                }//"SLA_ArmorCapeFull"),

                //("EarringsDefault
                else if (Settings.EarringsDefault && (StrMatch(name, "earring")))
                {
                    matched = true;
                    AddTag(armorEditObj, SLA_Earrings);
                }//"SLA_Earrings"),
                /* ("PiercingNoseDefault
				else if (Settings.PiercingNoseDefault && (StrMatch(name, "earring")))
				{
				matched = true;
				AddTag(armorEditObj, SLA_PiercingNose);
				}//"SLA_PiercingNose")
				//("PiercingLipsDefault
				else if (Settings.PiercingLipsDefault && (StrMatch(name, "earring")))
				{
				matched = true;
				AddTag(armorEditObj, SLA_PiercingLips);
				}//"SLA_PiercingLips")
				//("PiercingBellyDefault
				else if (Settings.PiercingBellyDefault && (StrMatch(name, "earring")))
				{
				matched = true;
				AddTag(armorEditObj, SLA_PiercingBelly);
				}//"SLA_PiercingBelly")
				//("PiercingVulvaDefault
				else if (Settings.PiercingVulvaDefault && (StrMatch(name, "earring")))
				{
				matched = true;
				AddTag(armorEditObj, SLA_PiercingVulva);
				}//"SLA_PiercingVulva")
				//("ThongGstringDefault
				else if (Settings.ThongGstringDefault && (StrMatch(name, "earring")))
				{
				matched = true;
				AddTag(armorEditObj, SLA_ThongGstring);
				}//"SLA_ThongGstring")
				//("MicroHotpantsDefault
				else if (Settings.MicroHotpantsDefault && (StrMatch(name, "earring")))
				{
				matched = true;
				AddTag(armorEditObj, SLA_MicroHotpants);
				}//"SLA_MicroHotpants")*/
                //("PantsNormalDefault
                else if (Settings.PantsNormalDefault && (StrMatch(name, "pants")))
                {
                    matched = true;
                    AddTag(armorEditObj, SLA_PantsNormal);
                }//"SLA_PantsNormal"),

                //("ArmorIllegalDefault
                else if (Settings.ArmorIllegalDefault && (StrMatch(name, "lace") || StrMatch(name, "lacebody") || StrMatch(name, "lingerie")))
                {
                    matched = true;
                    AddTag(armorEditObj, SLA_ArmorIllegal);
                }//"SLA_ArmorIllegal")
                 //("KillerHeelsDefault
                else if (Settings.KillerHeelsDefault && (StrMatch(name, "shoes") || StrMatch(name, "boots") || StrMatch(name, "heel") || StrMatch(name, "heels")))
                {
                    matched = true;
                    AddTag(armorEditObj, SLA_KillerHeels);
                }//"SLA_KillerHeels"),
                /* ("ThongCStringDefault
				else if (Settings.ThongCStringDefault && (StrMatch(name, "earring")))
				{
				matched = true;
				AddTag(armorEditObj, SLA_ThongCString);
				}//"SLA_ThongCString")
				//("ThongLowlegDefault
				else if (Settings.ThongLowlegDefault && (StrMatch(name, "earring")))
				{
				matched = true;
				AddTag(armorEditObj, SLA_ThongLowleg);
				}//"SLA_ThongLowleg"),
				*/
                //("ArmorFemaleOnlyDefault
                else if (Settings.ArmorFemaleOnlyDefault && (StrMatch(name, "lace") || StrMatch(name, "lacebody") || StrMatch(name, "lingerie") || StrMatch(name, "stocking") || StrMatch(name, "stockings") || StrMatch(name, "stock") || StrMatch(name, "lingerie stocking") || StrMatch(name, "lingeriestocking") || StrMatch(name, "panties") || StrMatch(name, "panti") || StrMatch(name, "panty") || StrMatch(name, "corset") || StrMatch(name, "underwear")))
                {
                    matched = true;
                    AddTag(armorEditObj, SLA_ArmorFemaleOnly);
                }//"SLA_ArmorFemaleOnly")
                 //("BrabikiniDefault
                else if (Settings.BrabikiniDefault && (StrMatch(name, "bra")))
                {
                    matched = true;
                    AddTag(armorEditObj, SLA_Brabikini);
                }//"SLA_Brabikini")
                 //("ArmorHalfNakedDefault
                else if (Settings.ArmorHalfNakedDefault && (StrMatch(name, "lace") || StrMatch(name, "lacebody") || StrMatch(name, "lingerie") || StrMatch(name, "shorts")))
                {
                    matched = true;
                    AddTag(armorEditObj, SLA_ArmorHalfNaked);
                }//"SLA_ArmorHalfNaked"),
                /* ("HasSleevesDefault*/
                else if (Settings.HasSleevesDefault && (StrMatch(name, "sleeves")))
                {
                    matched = true;
                    AddTag(armorEditObj, SLA_HasSleeves);
                }//"SLA_HasSleeves"),

                //("MicroSkirtDefault
                else if (Settings.MicroSkirtDefault && (StrMatch(name, "skirt")))
                {
                    matched = true;
                    AddTag(armorEditObj, SLA_MicroSkirt);
                }//"SLA_MicroSkirt")
                 //("FullSkirtDefault
                else if (Settings.FullSkirtDefault && (StrMatch(name, "skirt") || StrMatch(name, "gown") || StrMatch(name, "dress")))
                {
                    matched = true;
                    AddTag(armorEditObj, SLA_FullSkirt);
                }//"SLA_FullSkirt")
                /*
				//("ArmorCurtainDefault
				else if (Settings.ArmorCurtainDefault && (StrMatch(name, "earring")))
				{
				matched = true;
				AddTag(armorEditObj, SLA_ArmorCurtain);
				}//"SLA_ArmorCurtain")
				//("ArmorPartBottomDefault
				else if (Settings.ArmorPartBottomDefault && (StrMatch(name, "earring")))
				{
				matched = true;
				AddTag(armorEditObj, SLA_ArmorPartBottom);
				}//"SLA_ArmorPartBottom"),
				*/
                if (matched)
                {
                    state.PatchMod.Armors.Set(armorEditObj);
                }
            }
        }

        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            HashSet<string> MASTER_MODS = new HashSet<string>()
            {
                "SexLabAroused.esm",
            };

            var modsToPatch = Settings.ModsToPatch;
            var modsToNotPatch = Settings.ModsToNotPatch;

            if (modsToNotPatch.Any())
            {
                Console.WriteLine($"Blacklist:\n{string.Join("\n", modsToNotPatch)}");
            }

            var shortenedLoadOrder = modsToPatch.Any()
                ? state.LoadOrder.PriorityOrder.Where(mod => modsToPatch.Contains(mod.ModKey) && !modsToNotPatch.Contains(mod.ModKey)).ToList()
                : state.LoadOrder.PriorityOrder.Where(mod => !modsToNotPatch.Contains(mod.ModKey)).ToList();

            LoadKeywords(state);

            /*foreach (var armor in shortenedLoadOrder.SelectMany(mod => mod.Mod?.Armors?.Where(a => a.Name != null)))
            {
                ParseName(state, armor, armor.Name?.ToString());
            }*/
            foreach (var armor in shortenedLoadOrder
                     .Where(mod => mod != null && mod.Mod != null && mod.Mod.Armors != null) // Ensure mod, Mod, and Armors are not null
                     .SelectMany(mod => mod!.Mod!.Armors!.Where(a => a?.Name != null))) // Use null-forgiving operator
            {
                var armorName = armor.Name?.ToString();
                if (armorName != null) // Ensure name is not null
                {
                    ParseName(state, armor, armorName);
                }
            }

        }

        // Keyword variables (placeholders)
        public static IKeywordGetter? EroticArmor;
        public static IKeywordGetter? SLA_ArmorHarness;
        public static IKeywordGetter? SLA_ArmorSpendex;
        public static IKeywordGetter? SLA_ArmorTransparent;
        public static IKeywordGetter? SLA_BootsHeels;
        public static IKeywordGetter? SLA_VaginalDildo;
        public static IKeywordGetter? SLA_AnalPlug;
        public static IKeywordGetter? SLA_PiercingClit;
        public static IKeywordGetter? SLA_PiercingNipple;
        public static IKeywordGetter? SLA_ArmorPretty;
        public static IKeywordGetter? SLA_ArmorBondage;
        public static IKeywordGetter? SLA_AnalPlugTail;
        public static IKeywordGetter? SLA_AnalBeads;
        public static IKeywordGetter? SLA_VaginalBeads;
        public static IKeywordGetter? SLA_ArmorRubber;
        // Not in SexLabAroused Redux V28b SSE Modified by BakaFactory(2020 11 17)
        //public static IKeywordGetter? SLA_BraArmor;
        public static IKeywordGetter? SLA_ThongT;
        public static IKeywordGetter? SLA_PantiesNormal;
        public static IKeywordGetter? SLA_HasLeggings;
        public static IKeywordGetter? SLA_HasStockings;
        public static IKeywordGetter? SLA_MiniSkirt;
        public static IKeywordGetter? SLA_ArmorHalfNakedBikini;
        //Added Keywords. From SexLabAroused Redux V28b SSE Modified by BakaFactory(2020 11 17)
        public static IKeywordGetter? SLA_PastiesNipple;
        public static IKeywordGetter? SLA_PastiesCrotch;
        public static IKeywordGetter? SLA_ShowgirlSkirt;
        public static IKeywordGetter? SLA_PelvicCurtain;
        public static IKeywordGetter? SLA_ArmorPartTop;
        public static IKeywordGetter? SLA_ArmorLewdLeotard;
        public static IKeywordGetter? SLA_ImpossibleClothes;
        public static IKeywordGetter? SLA_ArmorCapeMini;
        public static IKeywordGetter? SLA_ArmorCapeFull;
        public static IKeywordGetter? SLA_Earrings;
        public static IKeywordGetter? SLA_PiercingNose;
        public static IKeywordGetter? SLA_PiercingLips;
        public static IKeywordGetter? SLA_PiercingBelly;
        public static IKeywordGetter? SLA_PiercingVulva;
        public static IKeywordGetter? SLA_ThongGstring;
        public static IKeywordGetter? SLA_MicroHotpants;
        public static IKeywordGetter? SLA_PantsNormal;
        public static IKeywordGetter? SLA_ArmorIllegal;
        public static IKeywordGetter? SLA_KillerHeels;
        public static IKeywordGetter? SLA_ThongCString;
        public static IKeywordGetter? SLA_ThongLowleg;
        public static IKeywordGetter? SLA_ArmorFemaleOnly;
        public static IKeywordGetter? SLA_Brabikini;
        public static IKeywordGetter? SLA_ArmorHalfNaked;
        public static IKeywordGetter? SLA_HasSleeves;
        public static IKeywordGetter? SLA_MicroSkirt;
        public static IKeywordGetter? SLA_FullSkirt;
        public static IKeywordGetter? SLA_ArmorCurtain;
        public static IKeywordGetter? SLA_ArmorPartBottom;
    }
}
